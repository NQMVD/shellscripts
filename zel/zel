#!/usr/bin/env bash
# This script was generated by bashly 1.2.0 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script
# :command.root_command
root_command() {
  # src/root_command.sh
  gum style --foreground="#7359f8" 'Zellij Sessions:'

  SESSIONS="$(zellij list-sessions --no-formatting || true)"

  echo ""

  if echo "$SESSIONS" | rg -q -F -- 'current'; then
      gum style --foreground="#7359f8" 'Already in a Session...'
      exit 1
  fi

  if echo "$SESSIONS" | rg -q -F -- 'No active zellij sessions found'; then
      case $(gum choose --header='Action:' "new" "new (layout)") in
          new)
              NAME=$(gum input --header="New Session" --placeholder="..." --prompt="Name: ")
              [[ $? -eq 130 ]] && echo "Cancelled" && exit 130
              zellij --session "$NAME"
              ;;

          "new (layout)")
              NAME=$(gum input --header="New Session" --placeholder="..." --prompt="Name: ")
              [[ $? -eq 130 ]] && echo "Cancelled" && exit 130
              LAYOUT=$(eza ~/.config/zellij/layouts | xargs basename -s '.kdl' | gum choose --header='Layouts:')
              [[ $? -eq 130 ]] && echo "Cancelled" && exit 130
              zellij --layout "$LAYOUT" --session "$NAME"
              ;;

          *)
              echo "Cancelled!"
              ;;
      esac
  else
      case $(gum choose --header='Action:' "attach" "new" "new (layout)" "kill" "delete") in
          attach)
              NAME=$(zellij list-sessions | gum filter | awk '{print $1}')
              [[ $? -eq 130 ]] && echo "Cancelled" && exit 130
              zellij attach "$NAME"
              ;;

          new)
              NAME=$(gum input --header="New Session" --placeholder="..." --prompt="Name: ")
              [[ $? -eq 130 ]] && echo "Cancelled" && exit 130
              zellij --session "$NAME"
              ;;

          "new (layout)")
              NAME=$(gum input --header="New Session" --placeholder="..." --prompt="Name: ")
              [[ $? -eq 130 ]] && echo "Cancelled" && exit 130
              LAYOUT=$(eza ~/.config/zellij/layouts | xargs basename -s '.kdl' | gum choose --header='Layouts:')
              [[ $? -eq 130 ]] && echo "Cancelled" && exit 130
              zellij --layout "$LAYOUT" --session "$NAME"
              ;;

          kill)
              NAME=$(zellij list-sessions | gum filter | awk '{print $1}')
              [[ $? -eq 130 ]] && echo "Cancelled" && exit 130
              zellij kill-session "$NAME"
              ;;

          delete)
              SELECTED=()
              zellij ls | gum choose --no-limit | awk '{print $1}' | while IFS="" read -r line; do array+=("$line"); done
              gum confirm "Delete ${#SELECTED[@]}?" || exit 1
              for name in "${SELECTED[@]}"
              do
                  zellij delete-session "$name"
              done
              ;;

          *)
              echo "Cancelled"
              ;;
      esac
  fi

}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
zel_usage() {
  printf "zel - simple zel session manager\n\n"

  printf "%s\n" "Usage:"
  printf "  zel\n"
  printf "  zel --help | -h\n"
  printf "  zel --version | -v\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg flags passthru
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        zel_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="root"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "root") root_command ;;
  esac
}

initialize
run "$@"
