#!/usr/bin/env bash
# This script was generated by bashly 1.1.9 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script
# :command.root_command
root_command() {
  # src/root_command.sh
  readonly package_name="${args[pkg]}"

  # if is empty $package_name; then
  #     echo "Usage: $0 <package_name>"
  #     exit 1
  # fi

  managers=("apt" "yay" "go" "cargo")
  installed_managers=()
  FAILED="✗"
  SUCCESS="✓"

  for manager in "${managers[@]}"; do
      if command -v "$manager" >/dev/null 2>&1; then
          installed_managers+=("$manager")
      fi
  done

  echo "Installed package managers: ${installed_managers[*]}"

  results=()
  for manager in "${installed_managers[@]}"; do
      case "$manager" in
          "apt")
              ;;
          "yay")
              output=$(yay -Ss "$package_name")
              if [ -n "$output" ]; then
                  lines=()

                  while IFS= read -r line; do
                      # gum log -l debug "line: $line"
                      if [[ "$line" != " "* ]] && [ -n "$line" ]; then
                          lines+=("$line")
                      fi
                  done <<< "$output"

                  count=${#lines[@]}
                  gum log -l debug "count: $count"
                  line="${lines[$((count - 1))]}"
                  gum log -l debug "line: $line"
                  chunks=($line)
                  fullname="${chunks[0]}"
                  gum log -l debug "fullname: $fullname"
                  IFS='/' read -ra fullnamesplit <<< "$fullname"
                  repo="${fullnamesplit[0]}"
                  name="${fullnamesplit[1]}"
                  version="${chunks[1]}"
                  gum log -l debug "repo, name, version: $repo, $name, $version"

                  if [ "$package_name" == "$name" ]; then
                      if [[ "$line" == *"Installed"* ]]; then
                          results+=("I -   yay: $fullname $version [installed]")
                      else
                          results+=("A -   yay: $fullname $version")
                      fi
                  else
                      results+=("X -   yay: $package_name != $fullname")
                  fi
              fi
              ;;
          "go")
              output=$(go version -m /home/noah/go/bin 2>/dev/null)
              if [ -n "$output" ]; then
                  while IFS= read -r line; do
                      if [[ "$line" == *"path"* ]] && [ -n "$line" ]; then
                          chunks=($line)
                          fullname="${chunks[1]}"
                          IFS='/' read -ra fullnamesplit <<< "$fullname"
                          name="${fullnamesplit[-1]}"
                          repo=$(IFS='/'; echo "${fullnamesplit[*]}")

                          if [ "$package_name" == "$name" ]; then
                              results+=("I -    go: $name ($repo) [installed]")
                          fi
                      fi
                  done <<< "$output"
              else
                  echo "stdout is empty!"
                  echo "$output"
              fi
              ;;
          "cargo")
              installed=false
              output=$(cargo install --list 2>/dev/null)
              if [ -n "$output" ]; then
                  while IFS= read -r line; do
                      if [[ "$line" != " "* ]] && [ -n "$line" ]; then
                          chunks=($line)
                          name="${chunks[0]}"
                          version="${chunks[1]}"

                          if [ "$package_name" == "$name" ]; then
                              results+=("I - cargo: $name $version [installed]")
                              installed=true
                          fi
                      fi
                  done <<< "$output"
              fi

              if [ "$installed" = false ]; then
                  output=$(cargo search "$package_name" 2>/dev/null)
                  if [ -n "$output" ]; then
                      line=$(echo "$output" | head -n 1)
                      chunks=($line)
                      name="${chunks[0]}"
                      version="${chunks[2]}"
                      description=$(echo "${chunks[@]:3}" | tr ' ' ' ')

                      if [ "$package_name" == "$name" ]; then
                          results+=("A - cargo: $name $version $description")
                      else
                          results+=("X - cargo: $package_name != $name $description")
                      fi
                  fi
              fi
              ;;
          *)
              echo "Unsupported package manager: $manager"
              ;;
      esac
  done

  echo -e "\nResults:"
  for result in "${results[@]}"; do
      echo "$result"
  done

}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
pkgmngr_usage() {
  if [[ -n $long_usage ]]; then
    printf "pkgmngr - Package ceo written in bash\n"
    echo

  else
    printf "pkgmngr - Package ceo written in bash\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  pkgmngr PKG\n"
  printf "  pkgmngr --help | -h\n"
  printf "  pkgmngr --version | -v\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "PKG"
    printf "    pkg to find in managers\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  pkgmngr zellij\n"
    printf "  pkgmngr neovim\n"
    printf "  pkgmngr gum\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        pkgmngr_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="root"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['pkg']+x} ]]; then
          args['pkg']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['pkg']+x} ]]; then
    printf "missing required argument: PKG\nusage: pkgmngr PKG\n" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "root") root_command ;;
  esac
}

initialize
run "$@"
