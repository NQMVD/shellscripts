#!/usr/bin/env bash
# This script was generated by bashly 1.1.9 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script
# :command.root_command
root_command() {
  # src/root_command.sh

  # header with info
  gum style \
    --border normal --margin "1" --padding "1 2" --border-foreground 4 \
    "bash script AI prompt generator $(gum style --foreground 99 'KAI')."

  # script description (write)
  DESC=$(gum write --header "Description:")
  is empty "$DESC" && gum log -l error "Description cannot be empty!" && exit 1

  # read stdin? single multi
  READSTDIN=$(gum confirm "Read from $(gum style --foreground 99 'stdin')?" && echo "Yes" || echo "No")
  is empty "$READSTDIN" && gum log -l error "Need to know..." && exit 1

  # take args? list them with write
  TAKEARGS=$(gum confirm "Take $(gum style --foreground 99 'args')?" && echo "Yes" || echo "No")
  is empty "$TAKEARGS" && gum log -l error "Need to know..." && exit 1
  if [[ "$TAKEARGS" == "Yes" ]]; then
    ARGSLIST=$(chewwrite "List of args (Ctrl+d to send)")
    is empty "$ARGSLIST" && gum log -l error "Args list cannot be empty!" && exit 1
  fi

  # use gum?
  USEGUM=$(gum confirm "Use $(gum style --foreground 99 'Gum') for prompts?" && echo "Yes" || echo "No")
  is empty "$USEGUM" && gum log -l error "Need to know..." && exit 1

  # generate
  PROMPT="You will be writing a Linux bash script based on a description provided by the user.

  Here is the description of what the script should do:

  <script_description>
  ${DESC}
  </script_description>

  "

  if [[ "$READSTDIN" == "Yes" ]]; then
    PROMPT="${PROMPT}The script will recieve piped input via the stdin.
    "
  fi

  if [[ "$TAKEARGS" == "Yes" ]]; then
    PROMPT="${PROMPT}The script will take these command line arguments:
    ${ARGSLIST}
    "
  fi

  if [[ "$USEGUM" == "Yes" ]]; then
    GUMINFO='
    When prompting the user for any input, use this "chewinput" command instead of the read command, DO NOT USE THE DEFAULT READ COMMAND:
    INPUT=$(chewinput "MESSAGE")

    When asking the user to choose an option from a list, use this "gum choose" command and provide it with all the options as arguments like so
    CHOICE=$(gum choose "option1" "option2" "option3")

    When asking for multiple choice, append the --no-limit flag like so:
    MULTICHOICE=$(gum choose --no-limit "option1" "option2" "option3")

    When asking for a confirmation, use the "gum confirm" command and also provide it with a header like so:
    IMPORTANT! the gum confirm command returns 0 if the user chose YES and 1 if the user chose NO!
    if gum confirm "HEADER"; then
      # user chose YES
    else
      # user chose NO
    fi

    IMPORTANT! if theres no need for a prompt, a choice or a confirm, DO NOT USE ANY! DO NOT BOTHER THE USER!
    '

    PROMPT="${PROMPT}
    ${GUMINFO}
    "
  fi

  PROMPT="${PROMPT}
  First, write out a high-level plan for how you will implement this bash script in a <scratchpad>. Break down the key steps and logic needed.

  Then, write out the actual bash script inside <bash_script> tags.
  Wrap the code in three backticks markdown style.
  When generating the code make sure to:
  - Take command line arguments as described
  - Read from stdin as described
  - Handle errors and edge cases
  - Provide useful output

  Aim to write a correct, robust and clear bash script that fully implements the functionality described by the user.

  After you write the script, show an example of how it would be executed."

  CHOICE='none'
  while true; do
    CHOICE=$(gum choose --header "$(gum style --foreground 99 'Done!') Next?" "View" "Copy" "Run" "Quit")

    if [[ "$CHOICE" == "View" ]]; then
      echo "$PROMPT" | gum pager --show-line-numbers='no'
    else
      break
    fi
  done

  if [[ "$CHOICE" == "Copy" ]]; then
    echo "$PROMPT" | wl-copy
    echo 'Copied!'
  elif [[ "$CHOICE" == "Run" ]]; then
    MODEL='codellama'

    while true; do
      # RESPONSE=$(gum spin --title="Generating..." -- ollama run "$MODEL" "$PROMPT")

      MODELS=$(aichat --list-models)
      SHORTMODEL=$(gum choose 'codellama' 'llama3' 'opus')
      FULLMODEL=$(echo "$MODELS" | rg "$SHORTMODEL")
      # echo "Fullmodel: ${FULLMODEL}" >> fullmodel.log
      RESPONSE=$(gum spin --title="Generating..." -- aichat --model "$FULLMODEL" "$PROMPT")
      # RESPONSE=$(aichat --model "$FULLMODEL" "$PROMPT")

      echo "# DATE: $(date)
    ---
    # MODEL: ${MODEL}
    ---
    # PROMPT::
    ${PROMPT}
    ---
    # RESPONSE::
    ${RESPONSE}
    " > "${HOME}/ai/${SHORTMODEL}/question_$(date +%c | tr ' ' '_').md"

      echo "$RESPONSE" | glow

      if gum confirm 'Accept Response?'; then
        break
      else
        clear
      fi

    done

    FILENAME=$(gum input --header "filename to save to (in $(pwd))")
    is empty "$FILENAME" && echo 'Aborted...' && exit 1
    # get code blocks

    CODEBLOCKLINENUM=$(echo "$RESPONSE" | getcodeblocks | gum choose | awk -F: '{print $1}') # | cut out the first number
    CODEBLOCK=$(echo "RESPONSE" | getcodeblocks -n "$CODEBLOCKLINENUM")

    echo "$CODEBLOCK" > "$FILENAME"
    echo "Saved!"
  fi

}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
kai_usage() {
  if [[ -n $long_usage ]]; then
    printf "kai - a prompt gen for asking ai to generate a bash script\n"
    echo

  else
    printf "kai - a prompt gen for asking ai to generate a bash script\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  kai\n"
  printf "  kai --help | -h\n"
  printf "  kai --version | -v\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        kai_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="root"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.2.3"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "root") root_command ;;
  esac
}

initialize
run "$@"
