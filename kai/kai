#!/usr/bin/env bash
# This script was generated by bashly 1.1.9 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script
# :command.root_command
root_command() {
  # src/root_command.sh

  # header with info
  gum style \
    --border normal --margin "1" --padding "1 2" --border-foreground 4 \
    "bash script AI prompt generator $(gum style --foreground 99 'KAI')."

  # script description (write)
  DESC=$(gum write --header "Description:")
  is empty "$DESC" && gum log -l error "Description cannot be empty!" && exit 1

  # read stdin? single multi
  READSTDIN=$(gum choose --header "Read from $(gum style --foreground 99 'stdin')" "no" "single-line" "multi-line")
  is empty "$READSTDIN" && gum log -l error "Need to know..." && exit 1

  # take args? list them with write
  TAKEARGS=$(gum confirm "Take args?" && echo "Yes" || echo "No")
  if [[ "$TAKEARGS" == "Yes" ]]; then
    ARGSLIST=$(gum write --header "List of args (Ctrl+d to send)")
    is empty "$ARGSLIST" && gum log -l error "Args list cannot be empty!" && exit 1
  fi

  # generate
  PROMPT="You will be writing a Linux bash script based on a description provided by the user.

  Here is the description of what the script should do:

  <script_description>
  ${DESC}
  </script_description>

  "

  case "$READSTDIN" in
    "no")
      PROMPT="${PROMPT}The script will ignore the stdin."
      ;;
    "single-line")
      PROMPT="${PROMPT}The script will read a single line string from stdin."
      ;;
    "multi-line")
      PROMPT="${PROMPT}The script will read a multi line string from stdin."
      ;;
  esac

  PROMPT="${PROMPT}

  "

  if [[ "$TAKEARGS" == "No" ]]; then
    PROMPT="${PROMPT}The script will ingore any command line arguments."
  else

      PROMPT="${PROMPT}The script will take these command line arguments:
      ${ARGSLIST}"
  fi

  PROMPT="${PROMPT}

  First, write out a high-level plan for how you will implement this bash script in a <scratchpad>. Break down the key steps and logic needed.

  Then, write out the actual bash script inside <bash_script> tags.
  Wrap the code in three backticks markdown style.
  When generating the code make sure to:
  - Take command line arguments as described
  - Read from stdin as described
  - Handle errors and edge cases
  - Provide useful output

  Aim to write a correct, robust and clear bash script that fully implements the functionality described by the user.

  After you write the script, show an example of how it would be executed."

  # copy or run with ollama?
  if gum confirm --affirmative "Copy" --negative "Run (ollama)" "$(gum style --foreground 99 'Done!') Next?"; then
    echo "$PROMPT" | wl-copy
  else
    # TODO implement
    echo "WIP"
  fi

}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
kai_usage() {
  if [[ -n $long_usage ]]; then
    printf "kai - a prompt gen for asking ai to generate a bash script\n"
    echo

  else
    printf "kai - a prompt gen for asking ai to generate a bash script\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  kai\n"
  printf "  kai --help | -h\n"
  printf "  kai --version | -v\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        kai_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="root"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "root") root_command ;;
  esac
}

initialize
run "$@"
