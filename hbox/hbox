#!/usr/bin/env bash
# This script was generated by bashly 1.1.9 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script
# :command.root_command
root_command() {
  # src/root_command.sh
  header=${args[header]}
  content=${other_args[*]}

  # Generate the boxed content
  boxed_content=$(echo "[-$header-]" "$content" | xargs gum style --padding="0 1" --border=rounded) #$(echo "$content" | box)

  # Extract the first line (the top border) from the boxed content
  top_border=$(echo "$boxed_content" | head -n 1)

  # Calculate the necessary padding
  border_length=${#top_border}
  header_length=${#header}
  padding_length=$(( (border_length - header_length) / 2 ))

  # Construct the new top border with the header
  new_top_border=""
  new_top_border+="${top_border:0:$((padding_length - 2))}"
  new_top_border+="[ $(gum style --foreground 6 $header) ]"
  new_top_border+="${top_border:$((2 + padding_length + header_length))}"

  # Replace the original top border with the new one
  result=$(echo "$boxed_content" | sed "2s/.*/$new_top_border/" | sed '1d')

  # Print the result
  echo "$result"

}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
hbox_usage() {
  if [[ -n $long_usage ]]; then
    printf "hbox - gum style box with a colored header\n"
    echo

  else
    printf "hbox - gum style box with a colored header\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  hbox HEADER [...]\n"
  printf "  hbox --help | -h\n"
  printf "  hbox --version | -v\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "HEADER"
    printf "\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  hbox HEADER $(ls)\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        hbox_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="root"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --)
        shift
        other_args+=("$@")
        break
        ;;

      -?*)
        other_args+=("$1")
        shift
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_catch_all
        # :argument.case
        if [[ -z ${args['header']+x} ]]; then
          args['header']=$1
          shift
        else
          other_args+=("$1")
          shift
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['header']+x} ]]; then
    printf "missing required argument: HEADER\nusage: hbox HEADER [...]\n" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "root") root_command ;;
  esac
}

initialize
run "$@"
